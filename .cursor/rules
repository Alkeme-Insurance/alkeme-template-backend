# Quick Reference - Alkeme Backend Template

## Project Type
Copier template for FastAPI + MongoDB/Cosmos DB backends deployed to Azure Container Apps.

## Critical Rules

### Architecture (Enforce Strictly)
```
Routers → Services → Clients
```
- **Routers**: HTTP only, use Depends(), delegate to services
- **Services**: Business logic, NO FastAPI imports, return typed objects
- **Clients**: Data access (DB, APIs), no business logic

### Naming (User Preference)
- Files/functions: `lowercase_with_underscores` (user_service.py, get_user_by_id)
- Classes: `PascalCase` (UserService, ProjectModel)
- Booleans: `is_`, `has_`, `can_` prefix

### Type Hints (Required)
All functions must have type hints:
```python
async def get_user(user_id: str) -> UserPublic | None:
    pass
```

### Async (Critical)
- Use `async def` for ALL I/O (DB, HTTP, files)
- Never use sync libraries (requests, pymongo sync) in async code
- Use `await` for async calls

### MongoDB/Cosmos DB
- **Must use PyMongo 3.x** (NOT 4.x) for Cosmos DB compatibility
- Always validate ObjectId: `if not ObjectId.is_valid(id): ...`
- Use Motor for async operations

### Security (Never Break)
- **NEVER log secrets**: tokens, passwords, connection strings
- Validate all inputs with Pydantic
- No `*` in CORS origins (production)

### Pydantic Models
Use suffixes: `UserCreate`, `UserUpdate`, `UserInDB`, `UserPublic`

## Template Specifics
- Files ending in `.jinja` are templates: use `{{ var }}`, `{% if %}`
- Generated code must be production-ready

## Pre-Commit
```bash
uv run ruff format backend
uv run ruff check backend --fix
uv run mypy backend
uv run pytest
```

## Common Errors to Prevent
❌ Sync I/O in async functions  
❌ Forgetting ObjectId.is_valid()  
❌ Business logic in routers  
❌ Logging secrets  
❌ PyMongo 4.x  

See `.cursorrules` for detailed patterns and examples.
