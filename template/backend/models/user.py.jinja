"""User Pydantic models."""

from __future__ import annotations

from datetime import datetime

from pydantic import BaseModel, ConfigDict, EmailStr, Field


class UserBase(BaseModel):
    """Base user model with shared fields."""

    email: EmailStr
    name: str = Field(..., min_length=1, max_length=100)


class UserCreate(UserBase):
    """User creation schema (POST requests)."""

    password: str = Field(..., min_length=8)


class UserUpdate(BaseModel):
    """User update schema (PUT/PATCH requests)."""

    email: EmailStr | None = None
    name: str | None = Field(None, min_length=1, max_length=100)
    is_active: bool | None = None


class UserInDB(UserBase):
    """User as stored in database."""

    model_config = ConfigDict(arbitrary_types_allowed=True)

    id: str = Field(alias="_id")
    is_active: bool = True
    created_at: datetime
    updated_at: datetime | None = None


class UserPublic(UserBase):
    """User as returned in API responses (no sensitive fields)."""

    model_config = ConfigDict(
        from_attributes=True,
        populate_by_name=True,
    )

    id: str = Field(alias="_id")
    is_active: bool
    created_at: datetime

