"""Project API endpoints."""

from __future__ import annotations

from fastapi import APIRouter, Depends, HTTPException{% if use_azure_auth %}, Security{% endif %}, status
from motor.motor_asyncio import AsyncIOMotorDatabase

from backend.clients.mongo_db import get_database
from backend.models.project import ProjectCreate, ProjectPublic, ProjectUpdate
from backend.services.project_service import ProjectService
{% if use_azure_auth %}
from backend.auth import azure_scheme
{% endif %}

router = APIRouter(prefix="/projects", tags=["projects"])


@router.post("/", response_model=ProjectPublic, status_code=status.HTTP_201_CREATED)
async def create_project(
    project_data: ProjectCreate,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> ProjectPublic:
    """Create a new project."""
    service = ProjectService(db)
{% if use_azure_auth %}
    owner_id = claims.get("sub", "anonymous")
{% else %}
    owner_id = "anonymous"  # In production, get from authentication
{% endif %}
    return await service.create_project(project_data, owner_id)


@router.get("/{project_id}", response_model=ProjectPublic)
async def get_project(
    project_id: str,
    db: AsyncIOMotorDatabase = Depends(get_database),
) -> ProjectPublic:
    """Get project by ID."""
    service = ProjectService(db)
    project = await service.get_project_by_id(project_id)
    if not project:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Project not found"
        )
    return project


@router.get("/", response_model=list[ProjectPublic])
async def list_projects(
    owner_id: str | None = None,
    skip: int = 0,
    limit: int = 10,
    db: AsyncIOMotorDatabase = Depends(get_database),
) -> list[ProjectPublic]:
    """List projects with optional owner filter and pagination."""
    service = ProjectService(db)
    return await service.list_projects(owner_id=owner_id, skip=skip, limit=limit)


@router.put("/{project_id}", response_model=ProjectPublic)
async def update_project(
    project_id: str,
    project_data: ProjectUpdate,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> ProjectPublic:
    """Update project."""
    service = ProjectService(db)
    project = await service.update_project(project_id, project_data)
    if not project:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Project not found"
        )
    return project


@router.delete("/{project_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_project(
    project_id: str,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> None:
    """Delete project."""
    service = ProjectService(db)
    deleted = await service.delete_project(project_id)
    if not deleted:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Project not found"
        )

