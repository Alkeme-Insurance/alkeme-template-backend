"""User API endpoints."""

from __future__ import annotations

from fastapi import APIRouter, Depends, HTTPException{% if use_azure_auth %}, Security{% endif %}, status
from motor.motor_asyncio import AsyncIOMotorDatabase

from backend.clients.mongo_db import get_database
from backend.models.user import UserCreate, UserPublic, UserUpdate
from backend.services.user_service import UserService
{% if use_azure_auth %}
from backend.auth import azure_scheme
{% endif %}

router = APIRouter(prefix="/users", tags=["users"])


@router.post("/", response_model=UserPublic, status_code=status.HTTP_201_CREATED)
async def create_user(
    user_data: UserCreate,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> UserPublic:
    """Create a new user."""
    service = UserService(db)
    try:
        return await service.create_user(user_data)
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY, detail=str(e))


@router.get("/{user_id}", response_model=UserPublic)
async def get_user(
    user_id: str,
    db: AsyncIOMotorDatabase = Depends(get_database),
) -> UserPublic:
    """Get user by ID."""
    service = UserService(db)
    user = await service.get_user_by_id(user_id)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user


@router.get("/", response_model=list[UserPublic])
async def list_users(
    skip: int = 0,
    limit: int = 10,
    db: AsyncIOMotorDatabase = Depends(get_database),
) -> list[UserPublic]:
    """List users with pagination."""
    service = UserService(db)
    return await service.list_users(skip=skip, limit=limit)


@router.put("/{user_id}", response_model=UserPublic)
async def update_user(
    user_id: str,
    user_data: UserUpdate,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> UserPublic:
    """Update user."""
    service = UserService(db)
    user = await service.update_user(user_id, user_data)
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user


@router.delete("/{user_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_user(
    user_id: str,
    db: AsyncIOMotorDatabase = Depends(get_database),
{% if use_azure_auth %}
    claims: dict = Security(azure_scheme),
{% endif %}
) -> None:
    """Delete user."""
    service = UserService(db)
    deleted = await service.delete_user(user_id)
    if not deleted:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

