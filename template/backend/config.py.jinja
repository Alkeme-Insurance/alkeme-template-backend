"""Application configuration."""

from __future__ import annotations

from pydantic import Field{% if use_azure_auth %}, computed_field{% endif %}
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Application settings loaded from environment."""

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True,
    )

    # MongoDB
    MONGODB_URI: str = Field(
        default="mongodb://localhost:27017/{{package_name}}",
        alias="MONGODB_URI",
    )

    # CORS Origins (comma-separated)
    BACKEND_CORS_ORIGINS: str = "http://localhost:8000,http://localhost:5173"
{% if use_azure_auth %}
    # Azure AD Authentication
    AZURE_TENANT_ID: str | None = Field(default=None, alias="AZURE_TENANT_ID")
    AZURE_CLIENT_ID: str | None = Field(default=None, alias="AZURE_CLIENT_ID")
    AZURE_CLIENT_SECRET: str | None = Field(default=None, alias="AZURE_CLIENT_SECRET")
    OPENAPI_CLIENT_ID: str = ""
    SCOPE_DESCRIPTION: str = "user_impersonation"
{% endif %}
    # Development
    DEV_NO_AUTH: bool = Field(default=False, alias="DEV_NO_AUTH")

    def get_cors_origins(self) -> list[str]:
        """Parse CORS origins from comma-separated string."""
        if isinstance(self.BACKEND_CORS_ORIGINS, str):
            return [origin.strip() for origin in self.BACKEND_CORS_ORIGINS.split(",")]
        return self.BACKEND_CORS_ORIGINS
{% if use_azure_auth %}
    @computed_field
    @property
    def SCOPE_NAME(self) -> str:
        """Compute Azure AD scope name."""
        if self.AZURE_CLIENT_ID:
            return f"api://{self.AZURE_CLIENT_ID}/{self.SCOPE_DESCRIPTION}"
        return ""

    @computed_field
    @property
    def SCOPES(self) -> dict[str, str]:
        """Compute Azure AD scopes dictionary."""
        if self.SCOPE_NAME:
            return {
                self.SCOPE_NAME: self.SCOPE_DESCRIPTION,
            }
        return {}
{% endif %}

settings = Settings()

