# Alkeme Backend Template - Copier Configuration
# https://copier.readthedocs.io/en/stable/

_min_copier_version: "9.2"
_subdirectory: template
_templates_suffix: .jinja
_answers_file: .copier-answers.yml

_envops:
  block_start_string: "{%"
  block_end_string: "%}"
  variable_start_string: "{{"
  variable_end_string: "}}"
  comment_start_string: "{#"
  comment_end_string: "#}"

_skip_if_exists:
  - "*.md"
  - ".env"
  - "backend/**/*.py"

_exclude:
  # Conditionally exclude pre-commit config if using detect-secrets
  - "{% if git_hook_tool != 'pre-commit' %}.pre-commit-config.yaml.jinja{% endif %}"

# ============================================================================
# PROJECT IDENTITY - Minimal User Input
# ============================================================================

project_name:
  type: str
  help: What is your backend project name?
  placeholder: "My Backend API"
  validator: >-
    {% if not project_name or project_name.strip() == '' %}
    Project name cannot be empty
    {% endif %}

project_description:
  type: str
  help: Short description of your project
  default: "{{ project_name }} - FastAPI backend with MongoDB and Azure deployment"

# Auto-calculated values (not shown to user)
package_name:
  type: str
  default: "{{ project_name | lower | replace(' ', '_') | replace('-', '_') | regex_replace('[^a-z0-9_]', '') }}"
  when: false

owner_org:
  type: str
  default: "Alkeme"
  when: false

author_name:
  type: str
  default: "Intelligent Solutions Alkeme Team"
  when: false

author_email:
  type: str
  default: "dev@alkeme.com"
  when: false

repository_url:
  type: str
  default: ""
  when: false

# ============================================================================
# TECHNOLOGY STACK - Smart Defaults
# ============================================================================

python_version:
  type: str
  default: "3.12"
  when: false  # Use latest stable, don't ask

# ============================================================================
# FEATURE FLAGS - All Enabled by Default
# ============================================================================

use_azure_auth:
  type: bool
  default: true
  when: false  # Enable by default

deploy_cosmos_db:
  type: bool
  default: true
  when: false  # Enable by default

use_git_hooks:
  type: bool
  default: true
  when: false  # Enable by default

git_hook_tool:
  type: str
  default: "pre-commit"
  when: false  # Use pre-commit by default

# ============================================================================
# AZURE DEPLOYMENT - Minimal Configuration
# ============================================================================

use_azure_deployment:
  type: bool
  default: true
  when: false  # Enable by default

azure_environment:
  type: str
  help: Environment for Azure deployment
  choices:
    - dev
    - staging
    - prod
  default: dev

# Auto-calculated Azure values
azure_region:
  type: str
  default: "eastus"
  when: false

azure_resource_group:
  type: str
  default: "rg-{{ package_name }}-{{ azure_environment }}"
  when: false

azure_container_registry_name:
  type: str
  default: "{{ package_name | replace('_', '') }}{{ azure_environment }}acr"
  when: false

backend_cors_origins:
  type: str
  default: "http://localhost:3000,http://localhost:5173,http://localhost:8080"
  when: false

# ============================================================================
# POST-GENERATION TASKS
# ============================================================================

_tasks:
  # Validate gh CLI is installed
  - command: |
      if ! which gh > /dev/null 2>&1; then
        echo "❌ ERROR: GitHub CLI (gh) is required but not installed"
        echo "📦 Install from: https://cli.github.com/"
        echo ""
        echo "Quick install:"
        echo "  macOS:   brew install gh"
        echo "  Linux:   See https://github.com/cli/cli/blob/trunk/docs/install_linux.md"
        echo "  Windows: winget install GitHub.cli"
        exit 1
      fi
      echo "✅ GitHub CLI detected"

  # Initialize git repository
  - command: '[ ! -d .git ] && git init -q || true'
    when: true

  # Install dependencies with uv
  - command: |
      curl -LsSf https://astral.sh/uv/install.sh | sh || true
      uv sync
    when: true

  # Setup git hooks for secret scanning
  - command: |
      {% if git_hook_tool == 'detect-secrets' %}
      uv tool install detect-secrets || pip install detect-secrets
      detect-secrets scan > .secrets.baseline || true
      {% else %}
      uv tool install pre-commit || pip install pre-commit
      pre-commit install
      {% endif %}
    when: "{{ use_git_hooks }}"

  # Create .env from .env.example
  - command: '[ ! -f .env ] && cp .env.example .env || true'
    when: true

  # Initial git commit
  - command: git add .
    when: true

  - command: 'git commit -m "chore: scaffold {{ package_name }} via Copier" || true'
    when: true

  # Success message
  - |
    echo ""
    echo "✅ {{ project_name }} has been successfully created!"
    echo ""
    echo "📁 Project location: {{ _copier_conf.dst_path }}"
    echo ""
    echo "🚀 Next steps:"
    echo ""
    echo "  1. cd {{ package_name }}"
    echo "  2. uv run uvicorn backend.main:app --reload  # Start development server"
    echo "  3. uv run pytest                            # Run tests"
    echo "  4. docker compose up --build                # Run with Docker"
    echo ""
    {% if use_azure_auth %}
    echo "🔐 Azure AD Configuration:"
    echo "  - Register your app in Azure AD"
    echo "  - Update AZURE_CLIENT_ID and AZURE_TENANT_ID in .env"
    echo ""
    {% endif %}
    {% if use_git_hooks %}
    echo "🔧 Git Hooks ({{ git_hook_tool }}):"
    echo "  - Python {{ python_version }}"
    echo "  - Secret scanning enabled to prevent credential leaks"
    echo ""
    {% endif %}
    echo "📖 Documentation: README.md"
    echo ""

# ============================================================================
# TEMPLATE METADATA
# ============================================================================

_metadata:
  template_name: "Alkeme Backend Template"
  template_version: "0.1.0"
  template_description: "Production-ready FastAPI + MongoDB backend template with Docker and Azure deployment"
  template_url: "https://github.com/Alkeme-Insurance/alkeme-template-backend"
  copier_version: "9.2.0"
  features:
    - "⚡ Modern Backend: FastAPI + Pydantic v2 + Motor (async MongoDB)"
    - "🐍 Python 3.12 (latest stable)"
    - "📦 uv Package Manager: Fast and reliable Python package management"
    - "🐳 Docker Support: Multi-stage builds with MongoDB"
    - "🔐 Authentication: Azure AD (MSAL) integration enabled"
    - "☁️ Azure Deployment: Bicep infrastructure for AKS with Cosmos DB"
    - "🧪 Testing: Pytest setup with async support"
    - "🔧 Pre-commit Hooks: Automated secret scanning"
    - "🏗️ CI/CD: GitHub Actions workflows with OIDC"
    - "📚 AI Rules: Modular Cursor rules for code quality"
  configuration:
    - "✨ Minimal Questions: Only project name and environment"
    - "🤖 Auto-Detection: Package name auto-derived from project name"
    - "⚙️ Smart Defaults: All features enabled, production-ready"
    - "🔧 Requires: GitHub CLI (gh) for automation"
